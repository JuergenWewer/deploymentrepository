- hosts: localhost
  tasks:
    - name: create yuuvis and waiting suppression ending
      community.kubernetes.helm:
        name: yuuvis
        release_namespace: yuuvis
        chart_ref: $HOME/workspace/yuuvis/yuuvis
        kubeconfig_path: "{{ kubeconfig }}"
        create_namespace: true
        wait_timeout: "15m"
        wait: true
        values:
          yuuvis:
            keycloak:
              address: "{{ keycloakAddress }}"
            git:
              password: "{{ yuuvisgitpassword }}"
            amqp:
              password: "{{ yuuvisamqppassword }}"
            db:
              password: "{{ yuuvisdbpassword }}"
            storage: |
              storage:
                repositories:
                  s3:
                    profiles: ['s3profile1']
                    default: true
                  netapp:
                    profiles: ['netapplike']
                    url:  http://archive/api/profiles/{profile}/dms/objects
                    useDiscovery: true
                profiles:
                  s3:
                    s3profile1:
                      access-key: "{{ yuuvisstoragestorageprofiless3s3profile1accesskey }}"
                      secret-key: "{{ yuuvisstoragestorageprofiless3s3profile1secretkey }}"
                      url: 'http://minio.infrastructure:9000'
                      bucket: 'dmscloudrepodocker'
                  netapp:
                    netapplike:
                      # use mountpoint of the persistent volume claim that provides the netapp storage
                      # must be the same in the deployment of the archive app
                      volume: '/var/lib/netapp/data'
                      defaultRetentionInDays: 10
            oauth2: |
              # configuration for the yuuvis authentication service
              # im variablennamen in einer configmap darf kein Punkt stehen!!!
              keycloak.host: {{ keycloakAddress }}
              authentication.filter: oauth2
              authentication.provider: oauth2
              authentication.exposed.endpoints: ''
              authentication.oauth2.tenants:
              - name: yuuvistest
                clientId: yuuvis-authentication-service
                clientSecret: dbdf4856-3c86-4e5f-aca7-96f3d93d35b4
                userAuthorizationUri: https://${keycloak.host}/auth/realms/yuuvistest/protocol/openid-connect/auth
                accessTokenUri: https://${keycloak.host}/auth/realms/yuuvistest/protocol/openid-connect/token
                userInfoUri: https://${keycloak.host}/auth/realms/yuuvistest/protocol/openid-connect/userinfo
                endSessionUri: https://${keycloak.host}/auth/realms/yuuvistest/protocol/openid-connect/logout?redirect_uri=${redir}
                userNameExtractionPattern: $.sub
              - name: testyuuvis
                clientId: yuuvis-authentication-service
                clientSecret: 61048b73-8cd7-4682-b78c-786c5dc8a2a1
                userAuthorizationUri: https://${keycloak.host}/auth/realms/testyuuvis/protocol/openid-connect/auth
                accessTokenUri: https://${keycloak.host}/auth/realms/testyuuvis/protocol/openid-connect/token
                userInfoUri: https://${keycloak.host}/auth/realms/testyuuvis/protocol/openid-connect/userinfo
                endSessionUri: https://${keycloak.host}/auth/realms/testyuuvis/protocol/openid-connect/logout?redirect_uri=${redir}
                userNameExtractionPattern: $.sub
              # configuration for the yuuvis organization service
              keycloak.server: https://keycloak-https.infrastructure/auth
              keycloak.admin.username: keycloak
              keycloak.admin.password: "{{ yuuvisoauth2keycloakadminpassword }}"
            services:
              api:
                tag: "{{ yuuvisservicesapitag }}"
              admin:
                tag: "{{ yuuvisservicesadmintag }}"
              audit:
                tag: "{{ yuuvisservicesaudittag }}"
              authentication:
                tag: "{{ yuuvisservicesauthenticationtag }}"
              config:
                tag: "{{ yuuvisservicesconfigtag }}"
              contentanalyzer:
                tag: "{{ yuuvisservicescontentanalyzertag }}"
              index:
                tag: "{{ yuuvisservicesindextag }}"
              organization:
                tag: "{{ yuuvisservicesorganizationtag }}"
              registry:
                tag: "{{ yuuvisservicesregistrytag }}"
              repository:
                tag: "{{ yuuvisservicesrepositorytag }}"
              search:
                tag: "{{ yuuvisservicessearchtag }}"
              system:
                tag: "{{ yuuvisservicessystemtag }}"
