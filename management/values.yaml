yuuvis:
  image:
    imagePullPolicy: Always
    imagePullSecret: yuuvisorg
  labels:
    app: yuuvis
  configservice:
    url: http://configservice/config
  livenessProbe:
    enable: false
    initialDelaySeconds: 300
    periodSeconds: 30
    timeoutSeconds: 10
    path: /manage/info
  readinessProbe:
    enable: true
    initialDelaySeconds: 0
    periodSeconds: 30
    timeoutSeconds: 5
    path: /manage/health
  metricsservice:
    dockerImage: docker.yuuvis.org/yuuvis/metrics:1.2.0
    profiles: postgres,dbs
    instances: 1
    java:
      maxHeap: -Xmx128m
  apitm:
    dockerImage: docker.yuuvis.org/yuuvis/tenant-management:1.4.0
    profiles: prod,docker,kubernetes,oauth2
    instances: 1
    java:
      maxHeap: -Xmx128m
    client:
      rooturl: https://optimalsystem
    # if e.g. the keycloak has been deployed with a self signed cert 
    # the certs mounted at /etc/yuuvis/certs will be added to the used java truststore 
    # at the start of the container
    volumes: |
      - name: keycloak-tls-selfsigned
        secret:
          defaultMode: 420
          secretName: keycloak-selfsigned-cert-secret
    volumeMounts: |
      - mountPath: /etc/yuuvis/certs
        name: keycloak-tls-selfsigned
  management:
    console:
      deploy: true
      client:
        instances: 1
        dockerImage: docker.yuuvis.org/yuuvis/management-console-client:1.2.1
      api:
        dockerImage: docker.yuuvis.org/yuuvis/management-console:1.2.0
        instances: 1
        config:
          host: optimalsystem
          keycloak: optimalsystem
          realm: optimalsystem
          client: optimalsystem
          clientsecret: optimalsystem
          apiHost: optimalsystem
          clientHost: optimalsystem
          jwt:
            token:
              access: optimalsystem
              refresh: optimalsystem
          db:
            host: postgresql.infrastructure
            port: "5432"
            name: consoledb
            user: optimalsystem
            password: optimalsystem
            createdb: true
            # for postgres systems the database an optional init job can be used to create 
            # the database
            # if createdb is 'true' 
            # the following user is used to test if the database and user exists
            # and if they dont exit, to create the database, the user and
            # grand the user privileges for the database
            # the privilege user must have the rights to create databases, users
            # and grand privileges to users
            privilege:
              user: postgres
              password: optimalsystem
          smtp:
            host: optimalsystem
            port: "25"
            from: optimalsystem
            user: optimalsystem
            password: optimalsystem
          ip:
            keycloak:
              realm: optimalsystem
              host: optimalsystem
              client:
                id: optimalsystem
                secret: optimalsystem
              api:
                id: optimalsystem
                secret: optimalsystem
     
initContainer:
  command: "until wget -q --spider http://configservice/manage/health; do echo waiting for configservice; sleep 11; done;"
